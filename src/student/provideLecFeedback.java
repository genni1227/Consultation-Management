package student;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import utils.User;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.CardLayout;
import java.awt.Font;
/**
 *
 * @author Win11
 */
public class provideLecFeedback extends JPanel{

    private ArrayList<String[]> confirmedAppointments = new ArrayList<>();
    private javax.swing.JComboBox<String> feedbackTemplates;
    
    public provideLecFeedback(JPanel cardPanel, CardLayout cardLayout) {
        initComponents();
//        loadAppointmentsAndFeedback();
        populateTable();
        populateComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        submitButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        feedbackScrollPane = new javax.swing.JScrollPane();
        feedbacklb = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();
        feedbackTable = new javax.swing.JTable();
        editFeedback = new javax.swing.JButton();
        deleteFeedback = new javax.swing.JButton();
        templateComboBox = new javax.swing.JComboBox<>();
        templatelb = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        BookingPage = new javax.swing.JMenu();
        ViewBookingPage = new javax.swing.JMenu();
        HistoryPage = new javax.swing.JMenu();

//        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
//        getContentPane().setLayout(null); // Set layout to absolute

        // Set properties for submitButton
        submitButton.setFont(new java.awt.Font("Segoe UI", 1, 14));
        submitButton.setText("Submit Feedback");
        submitButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 0), 3, true));
        submitButton.setBounds(95, 496, 123, 27);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });
        setLayout(null);
        add(submitButton);

        // Set properties for jLabel1
        titleLabel.setFont(new java.awt.Font("SimSun", 1, 36));
        titleLabel.setForeground(new java.awt.Color(255, 102, 102));
        titleLabel.setText("Your History");
        titleLabel.setBounds(233, 29, 233, 42);
        add(titleLabel);

        // Set properties for jScrollPane4 (feedbackTable)
        feedbackTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {"Lecturer", "Date", "Time", "Feedback"}
           ) { 
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make all cells non-editable
            }
        });
        tableScrollPane.setViewportView(feedbackTable);
        tableScrollPane.setBounds(38, 81, 601, 184);
        add(tableScrollPane);

        // Set properties for jLabel2
        feedbacklb.setFont(new java.awt.Font("Segoe UI", 0, 14));
        feedbacklb.setText("Write your feedback here :");
        feedbacklb.setBounds(38, 329, 166, 20);
        add(feedbacklb);
        feedbackScrollPane.setBounds(38, 359, 601, 56);
        add(feedbackScrollPane);
        feedbackArea = new javax.swing.JTextArea();
        feedbackScrollPane.setViewportView(feedbackArea);
        
                // Set properties for jScrollPane5 (feedbackArea)
                feedbackArea.setColumns(20);
                feedbackArea.setRows(5);

        // Set properties for jLabel3
        templatelb.setFont(new java.awt.Font("Segoe UI", 0, 14));
        templatelb.setText("You can select feedback template here :");
        templatelb.setBounds(39, 437, 250, 20);
        add(templatelb);

        // Set properties for jComboBox1
        templateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Template", "The session was very helpful because... ", "I suggest improving... ", "Good Session", "Needs Improvement", "Excellent Experience" }));
        templateComboBox.setBounds(332, 440, 211, 19);
        templateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        add(templateComboBox);

        // Set properties for editFeedback
        editFeedback.setFont(new java.awt.Font("Segoe UI", 1, 14));
        editFeedback.setText("Edit Feedback");
        editFeedback.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 153, 0), 3, true));
        editFeedback.setBounds(457, 496, 101, 27);
        editFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFeedbackActionPerformed(evt);
            }
        });
        add(editFeedback);

        // Set properties for deleteFeedback
        deleteFeedback.setFont(new java.awt.Font("Segoe UI", 1, 14));
        deleteFeedback.setText("Delete Feedback");
        deleteFeedback.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 3, true));
        deleteFeedback.setBounds(271, 496, 119, 27);
        deleteFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFeedbackActionPerformed(evt);
            }
        });
        add(deleteFeedback);
        

        Refreshbtn = new JButton("Refresh");
        Refreshbtn.setFont(new Font("Tahoma", Font.PLAIN, 12));
        Refreshbtn.addActionListener(e -> {
        	loadAppointmentsAndFeedback();
            populateTable();
        });

        Refreshbtn.setBounds(291, 288, 99, 23);
        add(Refreshbtn);

//        setSize(700, 600); // Set the initial size of the frame
//        setLocationRelativeTo(null); // Center the window
    }
    
    private void loadAppointmentsAndFeedback() {
        String user = User.getCurrentUser();
        boolean hasPastAppt = false;
        confirmedAppointments.clear(); // Clear the existing appointments list
        try (BufferedReader brAppointments = new BufferedReader(new FileReader("appointments.txt"));
             BufferedReader brFeedback = new BufferedReader(new FileReader("stu_feedback.txt"))) {

            // Read and store feedback from stu_feedback.txt
            Map<String, String> feedbackMap = new HashMap<>();
            String feedbackLine;
            while ((feedbackLine = brFeedback.readLine()) != null) {
                String[] feedbackParts = feedbackLine.split("\\|"); // Correctly split by "|"
                if (feedbackParts.length >= 5 && feedbackParts[0].trim().equalsIgnoreCase(user)) {
                    String feedbackKey = feedbackParts[1].trim() + "|" + feedbackParts[2].trim() + "|" + feedbackParts[3].trim();
                    feedbackMap.put(feedbackKey, feedbackParts[4].trim()); // Store feedback by key
                }
            }

            
            // Read appointments and match with feedback
            String appointmentLine;
            while ((appointmentLine = brAppointments.readLine()) != null) {
                String[] appointmentParts = appointmentLine.split(", "); // Split appointments by ", "
                if (appointmentParts.length == 5 && appointmentParts[0].trim().equalsIgnoreCase(user)) {
                    if (appointmentParts[4].trim().equalsIgnoreCase("Accept") && 
                        isPastOrUpcoming(appointmentParts[2].trim()).equals("Past")) {

                        String appointmentKey = appointmentParts[1].trim() + "|" + appointmentParts[2].trim() + "|" + appointmentParts[3].trim();
                        String feedback = feedbackMap.getOrDefault(appointmentKey, ""); // Retrieve feedback or default to empty string
                        
                        // Add to confirmed appointments
                        confirmedAppointments.add(new String[]{
                            appointmentParts[1].trim(), // Lecturer Name
                            appointmentParts[2].trim(), // Date
                            appointmentParts[3].trim(), // Time
                            feedback                     // Feedback
                        });
                        
                        hasPastAppt = true;
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (!hasPastAppt) {
        	JOptionPane.showMessageDialog(this, "Currently you don't have any past appointments, " + user + "." , "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else {
        	JOptionPane.showMessageDialog(this, "Table refreshed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) feedbackTable.getModel();
        model.setRowCount(0); // Clear existing rows
        for (String[] appointment : confirmedAppointments) {
            model.addRow(new Object[]{
                appointment[0], // Lecturer Name
                appointment[1], // Date
                appointment[2], // Time
                appointment[3]  // Feedback
            });
        }
    }

    private void populateComboBox() {
        templateComboBox.removeAllItems();
        
        templateComboBox.addItem("The session was very helpful because... ");
        templateComboBox.addItem("I suggest improving... ");
        templateComboBox.addItem("Good Session");
        templateComboBox.addItem("Needs Improvement");
        templateComboBox.addItem("Excellent Experience");
    }

 
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
       // Check if a row is selected
        String user = User.getCurrentUser();
    	int selectedRow = feedbackTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment from the table to submit feedback.");
            return;
        }
        

        // Get the selected appointment details
        String selectedLecturer = (String) feedbackTable.getValueAt(selectedRow, 0);
        String selectedDate = (String) feedbackTable.getValueAt(selectedRow, 1);
        String selectedTime = (String) feedbackTable.getValueAt(selectedRow, 2);
        String feedback = (String) feedbackTable.getValueAt(selectedRow, 3);
        String feedbacktext = feedbackArea.getText().trim();
        
        // Check if feedback already provided
        if (!feedback.isEmpty()) {
        	JOptionPane.showMessageDialog(this, "You cannot submit feedback again.");
            return;
        }

        // Check if feedback is empty
        if (feedbacktext.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please write your feedback before submitting.");
            return;
        }

        // Save the feedback to feedback.txt
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("stu_feedback.txt", true))) {
            bw.write(user + " | " +  selectedLecturer + " | " + selectedDate + " | " + selectedTime + " | " + feedbacktext);
            bw.newLine();
            JOptionPane.showMessageDialog(this, "Feedback submitted successfully!");

            // Update the confirmedAppointments list with the feedback
            confirmedAppointments.get(selectedRow)[3] = feedbacktext;

            // Update the table with the feedback
            DefaultTableModel model = (DefaultTableModel) feedbackTable.getModel();
            model.setValueAt(feedbacktext, selectedRow, 3); // Update the "Feedback" column (index 3)

            // Clear the feedback area
            feedbackArea.setText("");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving feedback: " + e.getMessage());
        }
    
        
    }

    
    private void deleteFeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFeedbackActionPerformed
        String user = User.getCurrentUser();
    	int selectedRow = feedbackTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a feedback to delete.");
            return;
        }

        // Retrieve selected row data
        String lecturer = (String) feedbackTable.getValueAt(selectedRow, 0);
        String date = (String) feedbackTable.getValueAt(selectedRow, 1);
        String time = (String) feedbackTable.getValueAt(selectedRow, 2);
        String feedback = (String) feedbackTable.getValueAt(selectedRow, 3);
        
        if(feedback.isEmpty()) {
	    	 JOptionPane.showMessageDialog(this, "There is no feedback to delete.");
	    	 return;
        }

        // Define the feedback key for matching
        String feedbackKey = user + " | " + lecturer + " | " + date + " | " + time;

        try {
            // Read all lines from stu_feedback.txt
            List<String> lines = new ArrayList<>();
            try (BufferedReader br = new BufferedReader(new FileReader("stu_feedback.txt"))) {
                String line;
                while ((line = br.readLine()) != null) {
                    if (!line.startsWith(feedbackKey)) {
                        lines.add(line);
                    }
                }
            }

            // Write back the updated lines to stu_feedback.txt
            try (BufferedWriter bw = new BufferedWriter(new FileWriter("stu_feedback.txt", false))) {
                for (String line : lines) {
                    bw.write(line);
                    bw.newLine();
                }
            }

            // Update the feedback field in the table
            feedbackTable.setValueAt("", selectedRow, 3); // Clear feedback column
            feedbackArea.setText(""); // Clear the feedback text area
            JOptionPane.showMessageDialog(this, "Feedback removed successfully!");
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while removing feedback.");
        }
    }


    private void editFeedbackActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = feedbackTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a feedback to edit.");
            return;
        }

        String feedback = (String) feedbackTable.getValueAt(selectedRow, 3);
        
        if (feedback.isEmpty()) {
        	JOptionPane.showMessageDialog(this, "You must submit a feedback first before you edit it.");
            return;
        }
        
        // Get the updated feedback from the text area
        String updatedFeedback = feedbackArea.getText().trim();
        if (updatedFeedback.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please write your updated feedback.");
            return;
        }

        // Get the values from the selected row in the feedback table
        String lecturerName = (String) feedbackTable.getValueAt(selectedRow, 0);
        String date = (String) feedbackTable.getValueAt(selectedRow, 1);
        String time = (String) feedbackTable.getValueAt(selectedRow, 2);


        // Read the existing feedback from the file and update the content
        List<String> updatedFileContent = new ArrayList<>();
        boolean feedbackUpdated = false;
        String user = User.getCurrentUser();

        try (BufferedReader br = new BufferedReader(new FileReader("stu_feedback.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(" \\| ");
                if (parts.length >= 5) {
                    String studentName = parts[0];
                    String fileLecturer = parts[1];
                    String fileDate = parts[2];
                    String fileTime = parts[3];
                    String fileFeedback = parts[4];

                    // Check if the current row matches the condition
                    if (studentName.equals(user) && fileLecturer.equals(lecturerName) &&
                        fileDate.equals(date) && fileTime.equals(time)) {
                        // Replace feedback for the matching entry
                        updatedFileContent.add(user + " | " + lecturerName + " | " + date + " | " + time + " | " + updatedFeedback);
                        feedbackUpdated = true;
                    } else {
                        // Keep the original line if it doesn't match
                        updatedFileContent.add(line);
                    }
                } else {
                    // If the line doesn't match the expected format, add it unchanged
                    updatedFileContent.add(line);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading the feedback file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        // If feedback was updated, write the updated content back to the file
        if (feedbackUpdated) {
            try (BufferedWriter bw = new BufferedWriter(new FileWriter("stu_feedback.txt"))) {
                for (String content : updatedFileContent) {
                    bw.write(content);
                    bw.newLine();
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error updating the feedback file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
                return;
            }

            // Update the feedback in the table
            feedbackTable.setValueAt(updatedFeedback, selectedRow, 3);
            feedbackArea.setText("");
            JOptionPane.showMessageDialog(this, "Feedback updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Feedback for the selected lecturer, date, and time not found.");
        }
    }



    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
   // Get the selected item from the combo box
    String selectedTemplate = (String) templateComboBox.getSelectedItem();

    // If the selected template is not null and it's not the placeholder value (if any)
    if (selectedTemplate != null) {
        if (selectedTemplate.equals("Select Template")) {
            feedbackArea.setText(""); // Clear the feedback area if the placeholder is selected
        } else {
            feedbackArea.setText(selectedTemplate); // Set the selected template into the feedbackArea
        }
    }


    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void feedbackTemplatesActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        String selectedTemplate = (String) feedbackTemplates.getSelectedItem();
        if (selectedTemplate != null && !selectedTemplate.equals("Select Template")) {
            feedbackArea.setText(selectedTemplate);
        }
    } 
    
    public static String isPastOrUpcoming(String dateStr) {
        try {
            // Remove the day of the week from the string (e.g., "(Thursday)")
            String dateOnlyStr = dateStr.split(" ")[0];

            // Define the date format to parse the date string
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date inputDate = dateFormat.parse(dateOnlyStr);
            
            // Get the current date and the date for yesterday
            Date currentDate = new Date();
            Date yesterday = new Date(currentDate.getTime() - (1000 * 60 * 60 * 24));

            // Compare the dates
            if ((inputDate.before(yesterday)) || (inputDate.equals(yesterday))){
                return "Past";
            } else {
                return "Upcoming";
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "Error in date comparison";
        }
    }

    private javax.swing.JMenu BookingPage;
    private javax.swing.JMenu HistoryPage;
    private javax.swing.JMenu ViewBookingPage;
    private javax.swing.JButton deleteFeedback;
    private javax.swing.JButton editFeedback;
    private javax.swing.JTextArea feedbackArea;
    private javax.swing.JTable feedbackTable;
    private javax.swing.JComboBox<String> templateComboBox;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel feedbacklb;
    private javax.swing.JLabel templatelb;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JScrollPane feedbackScrollPane;
    private javax.swing.JButton submitButton;
    private JButton Refreshbtn;
}